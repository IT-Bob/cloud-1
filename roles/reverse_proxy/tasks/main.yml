---
# tasks file for reverse_proxy
- name: Ensure directory exists
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ reverseproxy_docker_context_path }}/conf.d/"
    - "{{ reverseproxy_docker_context_path }}/certs/"
- name: Generate Nginx configuration
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/docker/proxy/nginx.conf
- name: Generate sites Nginx configuration files
  ansible.builtin.template:
    src: site.conf.j2
    dest: "{{ reverseproxy_docker_context_path }}/conf.d/{{ item.upstream }}.conf"
  vars:
    reverseproxy_docker_upstream: "{{ item.upstream }}"
    reverseproxy_docker_server: "{{ item.server }}"
    reverseproxy_docker_server_name: "{{ item.server_name }}"
  loop:
    "{{ reverseproxy_docker_sites }}"
  when: reverseproxy_docker_sites is defined
  notify: Restart reverse proxy container
- name: Generate Nginx default site configuration
  ansible.builtin.template:
    src: default.conf.j2
    dest: "{{ reverseproxy_docker_context_path }}/conf.d/default.conf"
  vars:
    reverseproxy_docker_default_upstream: "{{ item.upstream }}"
    reverseproxy_docker_default_tdn: "{{ item.server_name }}"
  when:
    - reverseproxy_docker_sites is defined
    - item.default is true
  loop: "{{ reverseproxy_docker_sites }}"
  notify: Restart reverse proxy container
- name: Create private key
  community.crypto.openssl_privatekey:
    path: /etc/docker/proxy/certs/cert.key
- name: Create certificate signing request
  community.crypto.openssl_csr_pipe:
    privatekey_path: /etc/docker/proxy/certs/cert.key
    common_name: ag-wordpress.ddns.net ag-phpmyadmin.ddns.net
    country_name: FR
    organization_name: 42
  register: csr
- name: Generate TLS certificate
  community.crypto.x509_certificate:
    path: "{{ reverseproxy_docker_context_path }}/certs/cert.pem"
    privatekey_path: "{{ reverseproxy_docker_context_path }}/certs/cert.key"
    csr_content: "{{ csr.csr }}"
    provider: selfsigned
  notify: Restart reverse proxy container
  register: reverseproxy_generate_certificate
- name: Create and run reverse proxy container
  community.docker.docker_container:
    name: "{{ reverseproxy_docker_ctn_name }}"
    image: "{{ reverseproxy_docker_image_name }}"
    state: started
    container_default_behavior: no_defaults
    detach: yes
    keep_volumes: no
    networks: "{{ reverseproxy_docker_networks }}"
    network_mode: default
    published_ports: "{{ reverseproxy_docker_published_ports }}"
    restart_policy: "{{ reverseproxy_docker_restart_policy }}"
    volumes: "{{ reverseproxy_docker_volumes }}"
  register: reverseproxy_fresh_run
